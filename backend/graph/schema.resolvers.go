package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"strconv"
	"github.com/mashumarrow/todoapplication/backend/graph/model"
	"github.com/mashumarrow/todoapplication/backend/models"
)


 
// ClassroomID is the resolver for the classroomId field.
func (r *classroomResolver) ClassroomID(ctx context.Context, obj *models.Classroom) (string, error) {
	panic(fmt.Errorf("not implemented: ClassroomID - classroomId"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userID string, name string, email string) (*models.User, error) {
	user := &models.User{
		Name:  name,
		Email: email,
	}

	if err := r.DB.Create(user).Error; err != nil {
		return nil, err
	}

	return user, nil
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, userID string, title string, subjectID string) (*models.Todo, error) {
	
	subjectIDUint, err := strconv.ParseUint(subjectID, 10, 32)
	if err != nil {
	
		return nil, err
	}
	todo := &models.Todo{
		Title:     title,
		Completed: false,
		SubjectID: uint(subjectIDUint),
	}

	if err := r.DB.Create(todo).Error; err != nil {
		return nil, err
	}

	return todo, nil
}

// CreateSubject is the resolver for the createSubject field.
func (r *mutationResolver) CreateSubject(ctx context.Context, subjectName string) (*models.Subject, error) {
	panic(fmt.Errorf("not implemented: CreateSubject - createSubject"))
}

// CreateClassroom is the resolver for the createClassroom field.
func (r *mutationResolver) CreateClassroom(ctx context.Context, classroomName string) (*models.Classroom, error) {
	panic(fmt.Errorf("not implemented: CreateClassroom - createClassroom"))
}

// CreateSchedule is the resolver for the createSchedule field.
func (r *mutationResolver) CreateSchedule(ctx context.Context, userID string, subjectID string, classroomID string, dayOfWeek model.DayOfWeek, period int) (*models.Schedule, error) {
	panic(fmt.Errorf("not implemented: CreateSchedule - createSchedule"))
}

// ToggleTodoComplete is the resolver for the toggleTodoComplete field.
func (r *mutationResolver) ToggleTodoComplete(ctx context.Context, todoID string) (*models.Todo, error) {
	panic(fmt.Errorf("not implemented: ToggleTodoComplete - toggleTodoComplete"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*models.User, error) {
	var users []*models.User
	if err := r.DB.Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*models.User, error) {
	var user models.User
	if err := r.DB.First(&user, id).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*models.Todo, error) {
	var todos []*models.Todo

	if err := r.DB.Preload("Subject").Find(&todos).Error; err != nil {
		return nil, err
	}

	return todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*models.Todo, error) {
	panic(fmt.Errorf("not implemented: Todo - todo"))
}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*models.Subject, error) {
	panic(fmt.Errorf("not implemented: Subjects - subjects"))
}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, id string) (*models.Subject, error) {
	panic(fmt.Errorf("not implemented: Subject - subject"))
}

// Classrooms is the resolver for the classrooms field.
func (r *queryResolver) Classrooms(ctx context.Context) ([]*models.Classroom, error) {
	panic(fmt.Errorf("not implemented: Classrooms - classrooms"))
}

// Classroom is the resolver for the classroom field.
func (r *queryResolver) Classroom(ctx context.Context, id string) (*models.Classroom, error) {
	panic(fmt.Errorf("not implemented: Classroom - classroom"))
}

// Schedules is the resolver for the schedules field.
func (r *queryResolver) Schedules(ctx context.Context, dayOfWeek model.DayOfWeek) ([]*models.Schedule, error) {
	panic(fmt.Errorf("not implemented: Schedules - schedules"))
}

// ID is the resolver for the id field.
func (r *scheduleResolver) ID(ctx context.Context, obj *models.Schedule) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// User is the resolver for the user field.
func (r *scheduleResolver) User(ctx context.Context, obj *models.Schedule) (*models.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// DayOfWeek is the resolver for the dayOfWeek field.
func (r *scheduleResolver) DayOfWeek(ctx context.Context, obj *models.Schedule) (model.DayOfWeek, error) {
	panic(fmt.Errorf("not implemented: DayOfWeek - dayOfWeek"))
}

// SubjectID is the resolver for the subjectId field.
func (r *subjectResolver) SubjectID(ctx context.Context, obj *models.Subject) (string, error) {
	panic(fmt.Errorf("not implemented: SubjectID - subjectId"))
}

// Todos is the resolver for the todos field.
func (r *subjectResolver) Todos(ctx context.Context, obj *models.Subject) ([]*models.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// ID is the resolver for the id field.
func (r *todoResolver) ID(ctx context.Context, obj *models.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Classroom returns ClassroomResolver implementation.
func (r *Resolver) Classroom() ClassroomResolver { return &classroomResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Schedule returns ScheduleResolver implementation.
func (r *Resolver) Schedule() ScheduleResolver { return &scheduleResolver{r} }

// Subject returns SubjectResolver implementation.
func (r *Resolver) Subject() SubjectResolver { return &subjectResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type classroomResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type scheduleResolver struct{ *Resolver }
type subjectResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
type userResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *todoResolver) Text(ctx context.Context, obj *models.Todo) (string, error) {
	panic(fmt.Errorf("not implemented: Text - text"))
}
func (r *todoResolver) Done(ctx context.Context, obj *models.Todo) (bool, error) {
	panic(fmt.Errorf("not implemented: Done - done"))
}
func (r *todoResolver) User(ctx context.Context, obj *models.Todo) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}
func (r *newTodoResolver) Text(ctx context.Context, obj *models.NewTodo, data string) error {
	panic(fmt.Errorf("not implemented: Text - text"))
}
func (r *newTodoResolver) UserID(ctx context.Context, obj *models.NewTodo, data string) error {
	panic(fmt.Errorf("not implemented: UserID - userId"))
}
//func (r *Resolver) NewTodo() NewTodoResolver { return &newTodoResolver{r} }

type newTodoResolver struct{ *Resolver }
