// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type NewClassroom struct {
	Classroomname string `json:"classroomname"`
}


type NewSchedule struct {
	Dayofweek     Dayofweek `json:"dayofweek"`
	Period        int       `json:"period"`
	Subjectname   string    `json:"subjectname"`
	Classroomname string    `json:"classroomname"`
}

type NewSubject struct {
	Subjectname string `json:"subjectname"`
}

type NewUser struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

type Query struct {
}

type Dayofweek string

const (
	DayofweekMonday    Dayofweek = "Monday"
	DayofweekTuesday   Dayofweek = "Tuesday"
	DayofweekWednesday Dayofweek = "Wednesday"
	DayofweekThursday  Dayofweek = "Thursday"
	DayofweekFriday    Dayofweek = "Friday"
	DayofweekSaturday  Dayofweek = "Saturday"
)

var AllDayofweek = []Dayofweek{
	DayofweekMonday,
	DayofweekTuesday,
	DayofweekWednesday,
	DayofweekThursday,
	DayofweekFriday,
	DayofweekSaturday,
}

func (e Dayofweek) IsValid() bool {
	switch e {
	case DayofweekMonday, DayofweekTuesday, DayofweekWednesday, DayofweekThursday, DayofweekFriday, DayofweekSaturday:
		return true
	}
	return false
}

func (e Dayofweek) String() string {
	return string(e)
}

func (e *Dayofweek) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Dayofweek(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Dayofweek", str)
	}
	return nil
}

func (e Dayofweek) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
