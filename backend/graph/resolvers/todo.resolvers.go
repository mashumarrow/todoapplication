package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"strconv"

	"github.com/mashumarrow/todoapplication/backend/graph"
	"github.com/mashumarrow/todoapplication/backend/models"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input models.NewTodo) (*models.Todo, error) {
	todo := &models.Todo{
		Title:     input.Title,
		UserID:    input.UserID,
		SubjectID: input.SubjectID,
	}

	if err := r.DB.Create(todo).Error; err != nil {
		return nil, err
	}

	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*models.Todo, error) {
	var todos []*models.Todo

	if err := r.DB.Preload("Subject").Find(&todos).Error; err != nil {
		return nil, err
	}

	return todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, userid string) (*models.Todo, error) {
	var todo models.Todo
	if err := r.DB.Where("user_id = ?", userid).First(&todo).Error; err != nil {
		return nil, err
	}
	return &todo, nil
}

// Userid is the resolver for the userid field.
func (r *todoResolver) Userid(ctx context.Context, obj *models.Todo) (string, error) {
	return fmt.Sprintf("%d", obj.UserID), nil
}

// Subjectid is the resolver for the subjectid field.
func (r *todoResolver) Subjectid(ctx context.Context, obj *models.Todo) (*string, error) {
	subjectID := fmt.Sprintf("%d", obj.SubjectID)
	return &subjectID, nil
}

// Userid is the resolver for the userid field.
func (r *newTodoResolver) Userid(ctx context.Context, obj *models.NewTodo, data string) error {
	userID, err := strconv.ParseUint(data, 10, 32)
    if err != nil {
        return fmt.Errorf("failed to convert string to uint: %w", err)
    }

    obj.UserID = uint(userID) // 変換したuintをUserIDに設定
    return nil
}

// Subjectid is the resolver for the subjectid field.
func (r *newTodoResolver) Subjectid(ctx context.Context, obj *models.NewTodo, data *string) error {
	if data == nil {
        return fmt.Errorf("subject ID is nil")
    }

    // string型のdataをuintに変換
    subjectID, err := strconv.ParseUint(*data, 10, 32)
    if err != nil {
        return fmt.Errorf("failed to convert string to uint: %w", err)
    }

    obj.SubjectID = uint(subjectID) // 変換したuintをSubjectIDに設定
    return nil
}

// Todo returns graph.TodoResolver implementation.
func (r *Resolver) Todo() graph.TodoResolver { return &todoResolver{r} }

// NewTodo returns graph.NewTodoResolver implementation.
func (r *Resolver) NewTodo() graph.NewTodoResolver { return &newTodoResolver{r} }

type todoResolver struct{ *Resolver }
type newTodoResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *todoResolver) Subject(ctx context.Context, obj *models.Todo) (*models.Subject, error) {
	var subject models.Subject

	if err := r.DB.First(&subject, "SubjectID = ?", obj.SubjectID).Error; err != nil {
		return nil, fmt.Errorf("failed to load subject: %w", err)
	}

	return &subject, nil
}
