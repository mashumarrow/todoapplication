package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	  "fmt"

	"github.com/mashumarrow/todoapplication/backend/graph"
	"github.com/mashumarrow/todoapplication/backend/graph/model"
	"github.com/mashumarrow/todoapplication/backend/models"
)

// Createschedule is the resolver for the createschedule field.
func (r *mutationResolver) Createschedule(ctx context.Context, input model.NewSchedule) (*models.Schedule, error) {
	schedule:= &models.Schedule{
		DayOfWeek:  string(input.Dayofweek),
		Period: input.Period,
	}

	if err := r.DB.Create(schedule).Error; err != nil {
		return nil, err
	}

	return schedule, nil

}

// Schedules is the resolver for the schedules field.
func (r *queryResolver) Schedules(ctx context.Context) ([]*models.Schedule, error) {
	var schedules []*models.Schedule
	
		if err := r.DB.Find(&schedules).Error; err != nil {
			return nil, err
		}
	
		return schedules, nil

}

// Schedule is the resolver for the schedule field.
func (r *queryResolver) Schedule(ctx context.Context, userid string) (*models.Schedule, error) {
	var schedule models.Schedule
	if err := r.DB.Where("user_id = ?", userid).First(&schedule).Error; err != nil {
        return nil, err
    }
    return &schedule, nil
}

// Userid is the resolver for the userid field.
func (r *scheduleResolver) Userid(ctx context.Context, obj *models.Schedule) (string, error) {
	return fmt.Sprintf("%d", obj.UserID), nil
}

// Dayofweek is the resolver for the dayofweek field.
func (r *scheduleResolver) Dayofweek(ctx context.Context, obj *models.Schedule) (model.Dayofweek, error) {
	return model.Dayofweek(obj.DayOfWeek), nil
}

// Todo is the resolver for the todo field.
func (r *scheduleResolver) Todo(ctx context.Context, obj *models.Schedule) (*models.Todo, error) {
	panic(fmt.Errorf("not implemented: Todo - todo"))
}

// Schedule returns graph.ScheduleResolver implementation.
func (r *Resolver) Schedule() graph.ScheduleResolver { return &scheduleResolver{r} }

type scheduleResolver struct{ *Resolver }
