package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	//"errors"
	"fmt"
	//"strconv"

	"github.com/mashumarrow/todoapplication/backend/graph"
	"github.com/mashumarrow/todoapplication/backend/graph/model"
	"github.com/mashumarrow/todoapplication/backend/models"
)

// Createschedule is the resolver for the createschedule field.
func (r *mutationResolver) Createschedule(ctx context.Context, input model.NewSchedule) (*models.Schedule, error) {
	// userID, err := strconv.ParseUint(input.Userid, 10, 64)
	// if err != nil {
	// 	return nil, errors.New("invalid User ID")
	// }

	userID, ok := ctx.Value("userID").(uint64)
	if !ok {
		return nil, fmt.Errorf("user not authenticated")
	}

	 // subjectnameを基にsubjectIDを取得
	 var subject models.Subject
	 if err := r.DB.Where("subject_name = ?", input.Subjectname).First(&subject).Error; err != nil {
		 return nil, fmt.Errorf("subject not found: %w", err)
	 }
	 subjectID := subject.SubjectID
 
	 // classroomnameを基にclassroomIDを取得
	 var classroom models.Classroom
	 if err := r.DB.Where("classroom_name = ?", input.Classroomname).First(&classroom).Error; err != nil {
		 return nil, fmt.Errorf("classroom not found: %w", err)
	 }
	 classroomID := classroom.ClassroomID
 
	schedule := &models.Schedule{
		UserID:        uint(userID),
		SubjectID:     uint(subjectID),
		ClassroomID:   uint(classroomID),
		DayOfWeek:     string(input.Dayofweek),
		Period:        input.Period,
		SubjectName:   input.Subjectname,
		ClassroomName: input.Classroomname,
	}

	if err := r.DB.Create(schedule).Error; err != nil {
		return nil, err
	}

	return schedule, nil
}

// Schedules is the resolver for the schedules field.
func (r *queryResolver) Schedules(ctx context.Context) ([]*models.Schedule, error) {
	var schedules []*models.Schedule

	if err := r.DB.Find(&schedules).Error; err != nil {
		return nil, err
	}

	return schedules, nil
}

// Schedule is the resolver for the schedule field.
func (r *queryResolver) Schedule(ctx context.Context, userid string) (*models.Schedule, error) {
	var schedule models.Schedule
	if err := r.DB.Where("user_id = ?", userid).First(&schedule).Error; err != nil {
		return nil, err
	}
	return &schedule, nil
}

// Userid is the resolver for the userid field.
func (r *scheduleResolver) Userid(ctx context.Context, obj *models.Schedule) (string, error) {
	return fmt.Sprintf("%d", obj.UserID), nil
}

// Subjectid is the resolver for the subjectid field.
func (r *scheduleResolver) Subjectid(ctx context.Context, obj *models.Schedule) (*string, error) {
	subjectID := fmt.Sprintf("%d", obj.SubjectID)
	return &subjectID, nil
}

// Classroomid is the resolver for the classroomid field.
func (r *scheduleResolver) Classroomid(ctx context.Context, obj *models.Schedule) (*string, error) {
	classroomID := fmt.Sprintf("%d", obj.ClassroomID)
	return &classroomID, nil
}

// Dayofweek is the resolver for the dayofweek field.
func (r *scheduleResolver) Dayofweek(ctx context.Context, obj *models.Schedule) (model.Dayofweek, error) {
	return model.Dayofweek(obj.DayOfWeek), nil
}

// Schedule returns graph.ScheduleResolver implementation.
func (r *Resolver) Schedule() graph.ScheduleResolver { return &scheduleResolver{r} }

type scheduleResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *scheduleResolver) Classname(ctx context.Context, obj *models.Schedule) (*string, error) {
	var classroom models.Classroom
	if err := r.DB.First(&classroom, obj.ClassroomID).Error; err != nil {
		return nil, err
	}
	return &classroom.ClassroomName, nil
}
func (r *scheduleResolver) Classroom(ctx context.Context, obj *models.Schedule) (*models.Classroom, error) {
	var classroom models.Classroom
	if err := r.DB.First(&classroom, obj.ClassroomID).Error; err != nil {
		return nil, err
	}

	return &classroom, nil
}
func (r *scheduleResolver) Subject(ctx context.Context, obj *models.Schedule) (*models.Subject, error) {
	var subject models.Subject
	if err := r.DB.First(&subject, obj.SubjectID).Error; err != nil {
		return nil, err
	}
	return &subject, nil
}
func (r *scheduleResolver) Todo(ctx context.Context, obj *models.Schedule) (*models.Todo, error) {
	var todo models.Todo
	if err := r.DB.First(&todo, obj.UserID).Error; err != nil {
		return nil, err
	}
	return &todo, nil
}
