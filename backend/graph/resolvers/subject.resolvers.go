package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/mashumarrow/todoapplication/backend/graph"
	"github.com/mashumarrow/todoapplication/backend/graph/model"
	"github.com/mashumarrow/todoapplication/backend/models"
)

// CreateSubject is the resolver for the createSubject field.
func (r *mutationResolver) CreateSubject(ctx context.Context, input model.NewSubject) (*models.Subject, error) {
	subject := &models.Subject{
		SubjectName: input.Subjectname,
	
	}

	if err := r.DB.Create(subject).Error; err != nil {
		return nil, err
	}

	return subject, nil

}

// Subjects is the resolver for the subjects field.
func (r *queryResolver) Subjects(ctx context.Context) ([]*models.Subject, error) {
	
		var subjects []*models.Subject
	
		if err := r.DB.Find(&subjects).Error; err != nil {
			return nil, err
		}
	
		return subjects, nil
}

// Subject is the resolver for the subject field.
func (r *queryResolver) Subject(ctx context.Context, subjectid *string) (*models.Subject, error) {
	var subject models.Subject
	if err := r.DB.Find(&subject).Error; err != nil {
        return nil, err
    }
    return &subject, nil
}

// Subjectid is the resolver for the subjectid field.
func (r *subjectResolver) Subjectid(ctx context.Context, obj *models.Subject) (string, error) {
	panic(fmt.Errorf("not implemented: Subjectid - subjectid"))
}

// Todos is the resolver for the todos field.
func (r *subjectResolver) Todos(ctx context.Context, obj *models.Subject) ([]*models.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Subject returns graph.SubjectResolver implementation.
func (r *Resolver) Subject() graph.SubjectResolver { return &subjectResolver{r} }

type subjectResolver struct{ *Resolver }
